import streamlit as st
from datetime import datetime
import pandas as pd
from io import StringIO, BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

def calculate_fitra(num_people, rate_per_person):
    """Calculate total Fitra amount"""
    return num_people * rate_per_person

def validate_inputs(num_people, rate_per_person):
    """Validate input values"""
    if num_people <= 0:
        return False, "Number of people must be greater than 0"
    if rate_per_person <= 0:
        return False, "Rate per person must be greater than 0"
    return True, ""

def generate_pdf(num_people, rate_per_person, total_amount, currency_code, selected_staple=None):
    """Generate a PDF with Fitra calculation results including selected staple food"""
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    # Title
    c.setFont("Helvetica-Bold", 16)
    c.drawString(100, height - 50, f"Fitra Calculation Result - {datetime.now().strftime('%Y-%m-%d')}")

    # Calculation Details
    c.setFont("Helvetica", 12)
    c.drawString(100, height - 100, "Calculation Breakdown:")
    if selected_staple:
        c.drawString(120, height - 120, f"Selected Staple Food: {selected_staple}")
        y_offset = 140
    else:
        y_offset = 120
    c.drawString(120, height - y_offset, f"Number of People: {num_people}")
    c.drawString(120, height - (y_offset + 20), f"Rate per Person: {currency_code} {rate_per_person:,.2f}")
    c.drawString(120, height - (y_offset + 40), f"Total Fitra Amount: {currency_code} {total_amount:,.2f}")

    # Footer
    c.setFont("Helvetica-Oblique", 10)
    c.drawString(100, 50, f"Generated by Fitra Calculator App on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

def main():
    # Initialize session state for reset functionality
    if 'reset' not in st.session_state:
        st.session_state.reset = False

    # App title and description with tooltip
    st.title(f"Fitra Calculator {datetime.now().year}")
    st.write("""
    This app calculates the total Fitra amount based on the number of people 
    and the rate per person in your region.
    """)
    with st.expander("What is Fitra?"):
        st.write("""
        Fitra (or Zakat al-Fitr) is a form of charity given to the poor at the end 
        of Ramadan. It's typically equivalent to the cost of one meal or 
        approximately 3.5kg of staple food per person.
        """)

    # Sidebar for configuration
    with st.sidebar:
        st.header("Settings")
        
        # Currency selection
        currency_options = {
            "PKR - Pakistani Rupee": "PKR",
            "USD - US Dollar": "USD",
            "GBP - British Pound": "GBP",
            "EUR - Euro": "EUR"
        }
        selected_currency = st.selectbox(
            "Select currency:",
            list(currency_options.keys()),
            help="Choose the currency for your calculations"
        )
        currency_code = currency_options[selected_currency]

        # Updated Fitra rates based on staple foods (in PKR) with English and Roman Urdu
        staple_options_pkr = {
            "Wheat/Flour (approx. 2kg) (Gehun/Aata)": 240,
            "Normal Dates (Mamooli Khajoor)": 2400,
            "Barley (Jau)": 700,
            "Raisins (Kishmish)": 6000,
            "Ajwa Dates (Ajwa Khajoor)": 19000
        }
        
        # Simple conversion rates (for demonstration)
        conversion_rates = {
            "PKR": 1.0,
            "USD": 0.0036,
            "GBP": 0.0028,
            "EUR": 0.0033
        }

        # Input method selection
        input_method = st.radio(
            "Choose input method:",
            ["Select from common rates", "Enter custom rate"],
            help="Select predefined rates or enter your own amount"
        )

        # Get rate based on input method
        if input_method == "Select from common rates":
            selected_staple = st.selectbox(
                "Select staple food:",
                list(staple_options_pkr.keys()),
                help="Choose a common staple food for Fitra calculation"
            )
            rate_per_person_pkr = staple_options_pkr[selected_staple]
            rate_per_person = rate_per_person_pkr * conversion_rates[currency_code]
            st.write(f"Rate per person: {currency_code} {rate_per_person:,.2f}")
        else:
            selected_staple = None  # No staple food selected for custom rate
            rate_per_person = st.number_input(
                f"Enter rate per person ({currency_code}):",
                min_value=0.0,
                step=100.0 if currency_code == "PKR" else 1.0,
                value=240.0 if currency_code == "PKR" else 1.0,
                help="Enter the local cost for one person's Fitra"
            )

    # Main calculator inputs
    st.header("Calculate Your Fitra")
    num_people = st.number_input(
        "Number of people in household:",
        min_value=1,
        step=1,
        value=1,
        help="Enter the total number of family members"
    )

    # Calculate and Reset buttons
    col1, col2 = st.columns(2)
    with col1:
        calculate = st.button("Calculate")
    with col2:
        reset = st.button("Reset", help="Clear all inputs and results")

    if reset:
        st.session_state.clear()
        st.rerun()

    if calculate:
        is_valid, error_message = validate_inputs(num_people, rate_per_person)
        
        if not is_valid:
            st.error(error_message)
        else:
            total_amount = calculate_fitra(num_people, rate_per_person)
            
            # Display results
            with st.expander("Calculation Results", expanded=True):
                st.subheader("Calculation Breakdown")
                if selected_staple:
                    st.write(f"Selected Staple Food: {selected_staple}")
                st.write(f"Step 1: Rate per person = {currency_code} {rate_per_person:,.2f}")
                st.write(f"Step 2: Number of people = {num_people}")
                st.write(f"Step 3: Total = {rate_per_person:,.2f} Ã— {num_people}")
                st.success(f"Final Total Fitra Amount: {currency_code} {total_amount:,.2f}")

                # Export options (CSV and PDF)
                col1, col2 = st.columns(2)
                with col1:
                    # CSV Export
                    results_df = pd.DataFrame({
                        "Description": ["Number of People", "Rate per Person", "Total Amount"],
                        "Value": [num_people, f"{currency_code} {rate_per_person:,.2f}", 
                                f"{currency_code} {total_amount:,.2f}"]
                    })
                    if selected_staple:
                        results_df = pd.concat([pd.DataFrame({"Description": ["Selected Staple Food"], "Value": [selected_staple]}), results_df])
                    csv = results_df.to_csv(index=False)
                    st.download_button(
                        label="Download as CSV",
                        data=csv,
                        file_name=f"fitra_calculation_{datetime.now().strftime('%Y%m%d')}.csv",
                        mime="text/csv",
                        help="Download your calculation results as a CSV file"
                    )
                with col2:
                    # PDF Export
                    pdf_buffer = generate_pdf(num_people, rate_per_person, total_amount, currency_code, selected_staple)
                    st.download_button(
                        label="Download as PDF",
                        data=pdf_buffer,
                        file_name=f"fitra_calculation_{datetime.now().strftime('%Y%m%d')}.pdf",
                        mime="application/pdf",
                        help="Download your calculation results as a PDF file"
                    )
            
            # Updated info section
            st.info(f"""
            Note: Rates shown are based on PKR values for {datetime.now().year} 
            and converted to {currency_code}.
            """)

if __name__ == "__main__":
    main()